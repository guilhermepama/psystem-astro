---
import EtapaVerificacaoEmail from './EtapaVerificacaoEmail.astro';
import EtapaDadosCadastrais from './EtapaDadosCadastrais.astro';
import EtapaHistoricoClinico from './EtapaHistoricoClinico.astro';
import EtapaConclusao from './EtapaConclusao.astro';

const { clientId, formId, token, clinicaId } = Astro.props;
---

<div class="form-container">
  <div class="progress-bar mb-8">
    <div class="flex justify-between">
      <div class="step" data-step="1">
        <div class="step-circle bg-blue-500 text-white">1</div>
        <div class="step-label">Email</div>
      </div>
      <div class="step" data-step="2">
        <div class="step-circle bg-gray-300">2</div>
        <div class="step-label">Dados Cadastrais</div>
      </div>
      <div class="step" data-step="3">
        <div class="step-circle bg-gray-300">3</div>
        <div class="step-label">Histórico Clínico</div>
      </div>
      <div class="step" data-step="4">
        <div class="step-circle bg-gray-300">4</div>
        <div class="step-label">Conclusão</div>
      </div>
    </div>
    <div class="progress-line mt-4 h-2 bg-gray-200 rounded-full">
      <div class="progress-fill h-full bg-blue-500 rounded-full" style="width: 25%"></div>
    </div>
  </div>

  <div class="form-steps">
    <div class="step-content" data-step="1">
      <EtapaVerificacaoEmail 
        clientId={clientId} 
        formId={formId} 
        token={token}
      />
    </div>
    
    <div class="step-content hidden" data-step="2">
      <EtapaDadosCadastrais 
        clientId={clientId} 
        formId={formId} 
        token={token}
      />
    </div>
    
    <div class="step-content hidden" data-step="3">
      <EtapaHistoricoClinico 
        clientId={clientId} 
        formId={formId} 
        token={token}
      />
    </div>
    
    <div class="step-content hidden" data-step="4">
      <EtapaConclusao />
    </div>
  </div>
</div>

<script>
  // Gerenciamento de estado do formulário
  let currentStep = 1;
  let clientData = {};
  let clientEmail = '';
  
  // Elementos DOM
  const stepContents = document.querySelectorAll('.step-content');
  const steps = document.querySelectorAll('.step');
  const progressFill = document.querySelector('.progress-fill');
  
  // Função para atualizar a visualização das etapas
  function updateStepView() {
    // Esconder todas as etapas
    stepContents.forEach(content => {
      content.classList.add('hidden');
    });
    
    // Mostrar a etapa atual
    const currentContent = document.querySelector(`.step-content[data-step="${currentStep}"]`);
    if (currentContent) {
      currentContent.classList.remove('hidden');
    }
    
    // Atualizar indicadores de etapa
    steps.forEach(step => {
      const stepNumber = parseInt(step.getAttribute('data-step'));
      const stepCircle = step.querySelector('.step-circle');
      
      if (stepNumber < currentStep) {
        // Etapa concluída
        stepCircle.classList.remove('bg-gray-300', 'bg-blue-500');
        stepCircle.classList.add('bg-green-500');
        stepCircle.innerHTML = '✓';
      } else if (stepNumber === currentStep) {
        // Etapa atual
        stepCircle.classList.remove('bg-gray-300', 'bg-green-500');
        stepCircle.classList.add('bg-blue-500');
        stepCircle.innerHTML = stepNumber;
      } else {
        // Etapa futura
        stepCircle.classList.remove('bg-blue-500', 'bg-green-500');
        stepCircle.classList.add('bg-gray-300');
        stepCircle.innerHTML = stepNumber;
      }
    });
    
    // Atualizar barra de progresso
    const progressPercentage = ((currentStep - 1) / 3) * 100;
    progressFill.style.width = `${progressPercentage}%`;
  }
  
  // Função para avançar para a próxima etapa
  window.goToNextStep = function(data = {}) {
    // Mesclar dados da etapa atual com o estado global
    clientData = { ...clientData, ...data };
    
    // Se estamos na etapa de email, salvar o email
    if (currentStep === 1 && data.email) {
      clientEmail = data.email;
    }
    
    // Avançar para a próxima etapa
    if (currentStep < 4) {
      currentStep++;
      updateStepView();
      
      // Se avançamos para a etapa de dados cadastrais, carregar os dados
      if (currentStep === 2) {
        window.loadClientData(clientEmail);
      }
    }
  };
  
  // Função para voltar para a etapa anterior
  window.goToPreviousStep = function() {
    if (currentStep > 1) {
      currentStep--;
      updateStepView();
    }
  };
  
  // Inicializar a visualização
  document.addEventListener('DOMContentLoaded', () => {
    updateStepView();
  });
</script>

<style>
  .step {
    text-align: center;
    flex: 1;
    position: relative;
  }
  
  .step-circle {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    font-weight: bold;
  }
  
  .step-label {
    margin-top: 8px;
    font-size: 14px;
  }
  
  .progress-line {
    position: relative;
    z-index: 1;
  }
  
  .progress-fill {
    transition: width 0.3s ease;
  }
</style>
