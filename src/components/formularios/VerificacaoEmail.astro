---
const { clienteId } = Astro.props;
---

<div class="verificacao-email">
  <form id="email-form" class="space-y-4">
    <div class="form-group">
      <label for="email" class="block text-sm font-medium text-gray-300 mb-1">
        Seu Email
      </label>
      <input 
        type="email" 
        id="email" 
        name="email"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="seu.email@exemplo.com"
      />
    </div>
    
    <div id="email-error" class="hidden text-red-600 text-sm"></div>
    
    <div class="flex justify-end">
      <button 
        type="submit"
        class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        Verificar Email
      </button>
    </div>
  </form>
  
  <div id="loading" class="hidden text-center py-4">
    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
    <p>Verificando...</p>
  </div>
  
  <div id="form-container" class="hidden mt-8">
    <!-- O formulário de atualização será carregado aqui após a verificação do email -->
  </div>
</div>

<script>
  // Importar o Supabase Client
  import { createClient } from '@supabase/supabase-js';
  
  // Função para verificar o email do cliente
  async function verificarEmailCliente(clienteId, email) {
    if (!clienteId || !email) {
      throw new Error('ID do cliente e email são obrigatórios');
    }
    
    try {
      console.log('Verificando email para cliente:', clienteId);

      // Criar cliente Supabase apenas com os cabeçalhos necessários
      const supabase = createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
        {
          global: {
            headers: {
              'x-cliente-id': clienteId,
              'x-client-email': email  // Usando 'x-client-email' conforme a política
            }
          }
        }
      );
      
      // Buscar dados do cliente
      const { data, error } = await supabase
        .from('cliente')
        .select('email')
        .single();
      
      if (error) {
        console.error('Erro ao verificar email do cliente:', error);
        return false;
      }
      
      // Se chegou aqui, significa que a política permitiu o acesso

      return true;
    } catch (err) {
      console.error('Erro ao verificar email do cliente:', err);
      throw err;
    }
  }
  
  // Função para buscar dados do cliente
  async function buscarDadosCliente(clienteId, email) {
    if (!clienteId || !email) {
      throw new Error('ID do cliente e email são obrigatórios');
    }
    
    try {
      console.log('Buscando dados para cliente:', clienteId);
      

      // Criar cliente Supabase apenas com os cabeçalhos necessários
      const supabase = createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
        {
          global: {
            headers: {
              'x-cliente-id': clienteId,

              'x-client-email': email
            }
          }
        }
      );
      
      // Buscar dados completos do cliente
      const { data, error } = await supabase
        .from('cliente')
        .select('*')
        .single();
      
      if (error) {
        console.error('Erro ao buscar dados do cliente:', error);
        throw error;
      }
      
      return data;
    } catch (err) {
      console.error('Erro ao buscar dados do cliente:', err);
      throw err;
    }
  }
  
  // Expor as funções globalmente
  window.verificarEmailCliente = verificarEmailCliente;
  window.buscarDadosCliente = buscarDadosCliente;
</script>


<script define:vars={{ clienteId}}>
  document.addEventListener('DOMContentLoaded', async () => {
    const emailForm = document.getElementById('email-form');
    const emailError = document.getElementById('email-error');
    const loading = document.getElementById('loading');
    const formContainer = document.getElementById('form-container');
    
    emailForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = document.getElementById('email').value.trim();
      if (!email) {
        emailError.textContent = 'Por favor, informe seu email.';
        emailError.classList.remove('hidden');
        return;
      }
      
      // Esconder formulário e mostrar loading
      emailForm.classList.add('hidden');
      loading.classList.remove('hidden');
      emailError.classList.add('hidden');
      
      try {
        console.log('Verificando email:', email);
        console.log('ID do cliente:', clienteId);
        
        // Usar a função global definida acima, sem passar formId e token
        const verificado = await window.verificarEmailCliente(clienteId, email);
        
        if (!verificado) {
          throw new Error('Email não corresponde ao cadastrado');
        }
        
        console.log('Email verificado com sucesso');
        
        // Buscar dados do cliente, sem passar formId e token
        const dadosCliente = await window.buscarDadosCliente(clienteId, email);
        console.log('Dados do cliente:', dadosCliente);
        
        // Mostrar o formulário com os dados do cliente
        formContainer.innerHTML = `
          <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
            <p>Email verificado com sucesso! Agora você pode atualizar seus dados.</p>
          </div>
          
          <form id="atualizar-form" class="space-y-4">
            <!-- Inputs ocultos para campos de sistema -->
            <input type="hidden" name="id" value="${dadosCliente.id}" />
            <input type="hidden" name="created_at" value="${dadosCliente.created_at}" />
            <input type="hidden" name="created_by" value="${dadosCliente.created_by}" />
            <input type="hidden" name="clinica_id" value="${dadosCliente.clinica_id}" />
            <input type="hidden" name="is_public" value="${dadosCliente.is_public ? 'true' : 'false'}" />
            
            <!-- Campos editáveis -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="form-group">
                <label for="nome" class="block text-sm font-medium text-gray-300 mb-1">Nome</label>
                <input 
                  type="text" 
                  id="nome" 
                  name="nome" 
                  value="${dadosCliente.nome || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="form-group">
                <label for="sobrenome" class="block text-sm font-medium text-gray-300 mb-1">Sobrenome</label>
                <input 
                  type="text" 
                  id="sobrenome" 
                  name="sobrenome" 
                  value="${dadosCliente.sobrenome || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="form-group">
                <label for="email" class="block text-sm font-medium text-gray-300 mb-1">Email</label>
                <input 
                  type="email" 
                  id="email" 
                  name="email" 
                  value="${dadosCliente.email || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="form-group">
                <label for="telefone" class="block text-sm font-medium text-gray-300 mb-1">Telefone</label>
                <input 
                  type="text" 
                  id="telefone" 
                  name="telefone" 
                  value="${dadosCliente.telefone || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="form-group">
                <label for="data_nascimento" class="block text-sm font-medium text-gray-300 mb-1">Data de Nascimento</label>
                <input 
                  type="date" 
                  id="data_nascimento" 
                  name="data_nascimento" 
                  value="${dadosCliente.data_nascimento || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="form-group">
                <label for="cpf" class="block text-sm font-medium text-gray-300 mb-1">CPF</label>
                <input 
                  type="text" 
                  id="cpf" 
                  name="cpf" 
                  value="${dadosCliente.cpf || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="form-group">
                <label for="profissao" class="block text-sm font-medium text-gray-300 mb-1">Profissão</label>
                <input 
                  type="text" 
                  id="profissao" 
                  name="profissao" 
                  value="${dadosCliente.profissao || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="form-group">
                <label for="endereco" class="block text-sm font-medium text-gray-300 mb-1">Endereço</label>
                <input 
                  type="text" 
                  id="endereco" 
                  name="endereco" 
                  value="${dadosCliente.endereco || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="form-group">
                <label for="bairro" class="block text-sm font-medium text-gray-300 mb-1">Bairro</label>
                <input 
                  type="text" 
                  id="bairro" 
                  name="bairro" 
                  value="${dadosCliente.bairro || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="form-group">
                <label for="cep" class="block text-sm font-medium text-gray-300 mb-1">CEP</label>
                <input 
                  type="text" 
                  id="cep" 
                  name="cep" 
                  value="${dadosCliente.cep || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="form-group">
                <label for="cidade" class="block text-sm font-medium text-gray-300 mb-1">Cidade</label>
                <input 
                  type="text" 
                  id="cidade" 
                  name="cidade" 
                  value="${dadosCliente.cidade || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="form-group">
                <label for="estado" class="block text-sm font-medium text-gray-300 mb-1">Estado</label>
                <input 
                  type="text" 
                  id="estado" 
                  name="estado" 
                  value="${dadosCliente.estado || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="form-group">
                <label for="contato_emergencia" class="block text-sm font-medium text-gray-300 mb-1">Contato de Emergência</label>
                <input 
                  type="text" 
                  id="contato_emergencia" 
                  name="contato_emergencia" 
                  value="${dadosCliente.contato_emergencia || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div class="form-group">
                <label for="telefone_emergencia" class="block text-sm font-medium text-gray-300 mb-1">Telefone de Emergência</label>
                <input 
                  type="text" 
                  id="telefone_emergencia" 
                  name="telefone_emergencia" 
                  value="${dadosCliente.telefone_emergencia || ''}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div class="flex justify-end">
              <button 
                type="submit"
                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                Atualizar Dados
              </button>
            </div>
          </form>
        `;


        
        // Mostrar o container do formulário
        formContainer.classList.remove('hidden');
      } catch (error) {
        console.error('Erro ao verificar email:', error);
        emailError.textContent = error.message || 'Ocorreu um erro ao verificar o email. Tente novamente.';
        emailError.classList.remove('hidden');
        emailForm.classList.remove('hidden');
      } finally {
        loading.classList.add('hidden');
      }
    });
  });
</script>